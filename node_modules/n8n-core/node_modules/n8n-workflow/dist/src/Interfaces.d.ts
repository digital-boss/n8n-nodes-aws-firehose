import * as express from 'express';
import { Workflow } from './Workflow';
import { WorkflowHooks } from './WorkflowHooks';
import { WorkflowOperationError } from './WorkflowErrors';
import { NodeApiError, NodeOperationError } from './NodeErrors';
export declare type IAllExecuteFunctions = IExecuteFunctions | IExecuteSingleFunctions | IHookFunctions | ILoadOptionsFunctions | IPollFunctions | ITriggerFunctions | IWebhookFunctions;
export interface IBinaryData {
    [key: string]: string | undefined;
    data: string;
    mimeType: string;
    fileName?: string;
    directory?: string;
    fileExtension?: string;
}
export interface IOAuth2Options {
    includeCredentialsOnRefreshOnBody?: boolean;
    property?: string;
    tokenType?: string;
    keepBearer?: boolean;
    tokenExpiredStatusCode?: number;
}
export interface IConnection {
    node: string;
    type: string;
    index: number;
}
export declare type ExecutionError = WorkflowOperationError | NodeOperationError | NodeApiError;
export interface IGetCredentials {
    get(type: string, name: string): Promise<ICredentialsEncrypted>;
}
export declare abstract class ICredentials {
    name: string;
    type: string;
    data: string | undefined;
    nodesAccess: ICredentialNodeAccess[];
    constructor(name: string, type: string, nodesAccess: ICredentialNodeAccess[], data?: string);
    abstract getData(encryptionKey: string, nodeType?: string): ICredentialDataDecryptedObject;
    abstract getDataKey(key: string, encryptionKey: string, nodeType?: string): CredentialInformation;
    abstract getDataToSave(): ICredentialsEncrypted;
    abstract hasNodeAccess(nodeType: string): boolean;
    abstract setData(data: ICredentialDataDecryptedObject, encryptionKey: string): void;
    abstract setDataKey(key: string, data: CredentialInformation, encryptionKey: string): void;
}
export interface ICredentialNodeAccess {
    nodeType: string;
    user?: string;
    date?: Date;
}
export interface ICredentialsDecrypted {
    name: string;
    type: string;
    nodesAccess: ICredentialNodeAccess[];
    data?: ICredentialDataDecryptedObject;
}
export interface ICredentialsEncrypted {
    name: string;
    type: string;
    nodesAccess: ICredentialNodeAccess[];
    data?: string;
}
export interface ICredentialsExpressionResolveValues {
    connectionInputData: INodeExecutionData[];
    itemIndex: number;
    node: INode;
    runExecutionData: IRunExecutionData | null;
    runIndex: number;
    workflow: Workflow;
}
export declare abstract class ICredentialsHelper {
    encryptionKey: string;
    constructor(encryptionKey: string);
    abstract getCredentials(name: string, type: string): Promise<ICredentials>;
    abstract getDecrypted(name: string, type: string, mode: WorkflowExecuteMode, raw?: boolean, expressionResolveValues?: ICredentialsExpressionResolveValues): Promise<ICredentialDataDecryptedObject>;
    abstract updateCredentials(name: string, type: string, data: ICredentialDataDecryptedObject): Promise<void>;
}
export interface ICredentialType {
    name: string;
    displayName: string;
    extends?: string[];
    properties: INodeProperties[];
    documentationUrl?: string;
    __overwrittenProperties?: string[];
}
export interface ICredentialTypes {
    credentialTypes?: {
        [key: string]: ICredentialType;
    };
    init(credentialTypes?: {
        [key: string]: ICredentialType;
    }): Promise<void>;
    getAll(): ICredentialType[];
    getByName(credentialType: string): ICredentialType;
}
export interface ICredentialData {
    name: string;
    data: string;
    nodesAccess: ICredentialNodeAccess[];
}
export declare type CredentialInformation = string | number | boolean | IDataObject;
export interface ICredentialDataDecryptedObject {
    [key: string]: CredentialInformation;
}
export declare type NodeInputConnections = IConnection[][];
export interface INodeConnections {
    [key: string]: NodeInputConnections;
}
export interface IConnections {
    [key: string]: INodeConnections;
}
export declare type GenericValue = string | object | number | boolean | undefined | null;
export interface IDataObject {
    [key: string]: GenericValue | IDataObject | GenericValue[] | IDataObject[];
}
export interface IGetExecutePollFunctions {
    (workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): IPollFunctions;
}
export interface IGetExecuteTriggerFunctions {
    (workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode): ITriggerFunctions;
}
export interface IGetExecuteFunctions {
    (workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode): IExecuteFunctions;
}
export interface IGetExecuteSingleFunctions {
    (workflow: Workflow, runExecutionData: IRunExecutionData, runIndex: number, connectionInputData: INodeExecutionData[], inputData: ITaskDataConnections, node: INode, itemIndex: number, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode): IExecuteSingleFunctions;
}
export interface IGetExecuteHookFunctions {
    (workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, activation: WorkflowActivateMode, isTest?: boolean, webhookData?: IWebhookData): IHookFunctions;
}
export interface IGetExecuteWebhookFunctions {
    (workflow: Workflow, node: INode, additionalData: IWorkflowExecuteAdditionalData, mode: WorkflowExecuteMode, webhookData: IWebhookData): IWebhookFunctions;
}
export interface IExecuteData {
    data: ITaskDataConnections;
    node: INode;
}
export declare type IContextObject = {
    [key: string]: any;
};
export interface IExecuteContextData {
    [key: string]: IContextObject;
}
export interface IExecuteFunctions {
    continueOnFail(): boolean;
    evaluateExpression(expression: string, itemIndex: number): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[];
    executeWorkflow(workflowInfo: IExecuteWorkflowInfo, inputData?: INodeExecutionData[]): Promise<any>;
    getContext(type: string): IContextObject;
    getCredentials(type: string, itemIndex?: number): Promise<ICredentialDataDecryptedObject | undefined>;
    getInputData(inputIndex?: number, inputName?: string): INodeExecutionData[];
    getMode(): WorkflowExecuteMode;
    getNode(): INode;
    getNodeParameter(parameterName: string, itemIndex: number, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getWorkflowDataProxy(itemIndex: number): IWorkflowDataProxyData;
    getWorkflowStaticData(type: string): IDataObject;
    getRestApiUrl(): string;
    getTimezone(): string;
    getWorkflow(): IWorkflowMetadata;
    prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>;
    putExecutionToWait(waitTill: Date): Promise<void>;
    sendMessageToUI(message: any): void;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface IExecuteSingleFunctions {
    continueOnFail(): boolean;
    evaluateExpression(expression: string, itemIndex: number | undefined): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[];
    getContext(type: string): IContextObject;
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject | undefined>;
    getInputData(inputIndex?: number, inputName?: string): INodeExecutionData;
    getMode(): WorkflowExecuteMode;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getRestApiUrl(): string;
    getTimezone(): string;
    getWorkflow(): IWorkflowMetadata;
    getWorkflowDataProxy(): IWorkflowDataProxyData;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface IExecuteWorkflowInfo {
    code?: IWorkflowBase;
    id?: string;
}
export interface ILoadOptionsFunctions {
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject | undefined>;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getCurrentNodeParameter(parameterName: string): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object | undefined;
    getCurrentNodeParameters(): INodeParameters | undefined;
    getTimezone(): string;
    getRestApiUrl(): string;
    helpers: {
        [key: string]: ((...args: any[]) => any) | undefined;
    };
}
export interface IHookFunctions {
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject | undefined>;
    getMode(): WorkflowExecuteMode;
    getActivationMode(): WorkflowActivateMode;
    getNode(): INode;
    getNodeWebhookUrl: (name: string) => string | undefined;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getTimezone(): string;
    getWebhookDescription(name: string): IWebhookDescription | undefined;
    getWebhookName(): string;
    getWorkflow(): IWorkflowMetadata;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface IPollFunctions {
    __emit(data: INodeExecutionData[][]): void;
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject | undefined>;
    getMode(): WorkflowExecuteMode;
    getActivationMode(): WorkflowActivateMode;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getRestApiUrl(): string;
    getTimezone(): string;
    getWorkflow(): IWorkflowMetadata;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface ITriggerFunctions {
    emit(data: INodeExecutionData[][]): void;
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject | undefined>;
    getMode(): WorkflowExecuteMode;
    getActivationMode(): WorkflowActivateMode;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getRestApiUrl(): string;
    getTimezone(): string;
    getWorkflow(): IWorkflowMetadata;
    getWorkflowStaticData(type: string): IDataObject;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface IWebhookFunctions {
    getBodyData(): IDataObject;
    getCredentials(type: string): Promise<ICredentialDataDecryptedObject | undefined>;
    getHeaderData(): object;
    getMode(): WorkflowExecuteMode;
    getNode(): INode;
    getNodeParameter(parameterName: string, fallbackValue?: any): NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[] | object;
    getNodeWebhookUrl: (name: string) => string | undefined;
    getParamsData(): object;
    getQueryData(): object;
    getRequestObject(): express.Request;
    getResponseObject(): express.Response;
    getTimezone(): string;
    getWebhookName(): string;
    getWorkflowStaticData(type: string): IDataObject;
    getWorkflow(): IWorkflowMetadata;
    prepareOutputData(outputData: INodeExecutionData[], outputIndex?: number): Promise<INodeExecutionData[][]>;
    helpers: {
        [key: string]: (...args: any[]) => any;
    };
}
export interface INodeCredentials {
    [key: string]: string;
}
export interface INode {
    name: string;
    typeVersion: number;
    type: string;
    position: [number, number];
    disabled?: boolean;
    notes?: string;
    notesInFlow?: boolean;
    retryOnFail?: boolean;
    maxTries?: number;
    waitBetweenTries?: number;
    alwaysOutputData?: boolean;
    executeOnce?: boolean;
    continueOnFail?: boolean;
    parameters: INodeParameters;
    credentials?: INodeCredentials;
    webhookId?: string;
}
export interface INodes {
    [key: string]: INode;
}
export interface IObservableObject {
    [key: string]: any;
    __dataChanged: boolean;
}
export interface IBinaryKeyData {
    [key: string]: IBinaryData;
}
export interface INodeExecutionData {
    [key: string]: IDataObject | IBinaryKeyData | undefined;
    json: IDataObject;
    binary?: IBinaryKeyData;
}
export interface INodeExecuteFunctions {
    getExecutePollFunctions: IGetExecutePollFunctions;
    getExecuteTriggerFunctions: IGetExecuteTriggerFunctions;
    getExecuteFunctions: IGetExecuteFunctions;
    getExecuteSingleFunctions: IGetExecuteSingleFunctions;
    getExecuteHookFunctions: IGetExecuteHookFunctions;
    getExecuteWebhookFunctions: IGetExecuteWebhookFunctions;
}
export declare type NodeParameterValue = string | number | boolean | undefined | null;
export interface INodeParameters {
    [key: string]: NodeParameterValue | INodeParameters | NodeParameterValue[] | INodeParameters[];
}
export declare type NodePropertyTypes = 'boolean' | 'collection' | 'color' | 'dateTime' | 'fixedCollection' | 'hidden' | 'json' | 'notice' | 'multiOptions' | 'number' | 'options' | 'string';
export declare type EditorTypes = 'code';
export interface INodePropertyTypeOptions {
    alwaysOpenEditWindow?: boolean;
    editor?: EditorTypes;
    loadOptionsDependsOn?: string[];
    loadOptionsMethod?: string;
    maxValue?: number;
    minValue?: number;
    multipleValues?: boolean;
    multipleValueButtonText?: string;
    numberPrecision?: number;
    numberStepSize?: number;
    password?: boolean;
    rows?: number;
    showAlpha?: boolean;
    sortable?: boolean;
    [key: string]: boolean | number | string | EditorTypes | undefined | string[];
}
export interface IDisplayOptions {
    hide?: {
        [key: string]: NodeParameterValue[];
    };
    show?: {
        [key: string]: NodeParameterValue[];
    };
}
export interface INodeProperties {
    displayName: string;
    name: string;
    type: NodePropertyTypes;
    typeOptions?: INodePropertyTypeOptions;
    default: NodeParameterValue | INodeParameters | INodeParameters[] | NodeParameterValue[];
    description?: string;
    displayOptions?: IDisplayOptions;
    options?: Array<INodePropertyOptions | INodeProperties | INodePropertyCollection>;
    placeholder?: string;
    isNodeSetting?: boolean;
    noDataExpression?: boolean;
    required?: boolean;
}
export interface INodePropertyOptions {
    name: string;
    value: string | number;
    description?: string;
}
export interface INodePropertyCollection {
    displayName: string;
    name: string;
    values: INodeProperties[];
}
export interface IParameterDependencies {
    [key: string]: string[];
}
export interface IPollResponse {
    closeFunction?: () => Promise<void>;
}
export interface ITriggerResponse {
    closeFunction?: () => Promise<void>;
    manualTriggerFunction?: () => Promise<void>;
    manualTriggerResponse?: Promise<INodeExecutionData[][]>;
}
export interface INodeType {
    description: INodeTypeDescription;
    execute?(this: IExecuteFunctions): Promise<INodeExecutionData[][] | null>;
    executeSingle?(this: IExecuteSingleFunctions): Promise<INodeExecutionData>;
    poll?(this: IPollFunctions): Promise<INodeExecutionData[][] | null>;
    trigger?(this: ITriggerFunctions): Promise<ITriggerResponse | undefined>;
    webhook?(this: IWebhookFunctions): Promise<IWebhookResponseData>;
    hooks?: {
        [key: string]: (this: IHookFunctions) => Promise<boolean>;
    };
    methods?: {
        loadOptions?: {
            [key: string]: (this: ILoadOptionsFunctions) => Promise<INodePropertyOptions[]>;
        };
    };
    webhookMethods?: {
        [key: string]: IWebhookSetupMethods;
    };
}
export declare type WebhookSetupMethodNames = 'checkExists' | 'create' | 'delete';
export interface IWebhookSetupMethods {
    [key: string]: ((this: IHookFunctions) => Promise<boolean>) | undefined;
    checkExists?: (this: IHookFunctions) => Promise<boolean>;
    create?: (this: IHookFunctions) => Promise<boolean>;
    delete?: (this: IHookFunctions) => Promise<boolean>;
}
export interface INodeCredentialDescription {
    name: string;
    required?: boolean;
    displayOptions?: IDisplayOptions;
}
export declare type INodeIssueTypes = 'credentials' | 'execution' | 'parameters' | 'typeUnknown';
export interface INodeIssueObjectProperty {
    [key: string]: string[];
}
export interface INodeIssueData {
    node: string;
    type: INodeIssueTypes;
    value: boolean | string | string[] | INodeIssueObjectProperty;
}
export interface INodeIssues {
    execution?: boolean;
    credentials?: INodeIssueObjectProperty;
    parameters?: INodeIssueObjectProperty;
    typeUnknown?: boolean;
    [key: string]: undefined | boolean | INodeIssueObjectProperty;
}
export interface IWorfklowIssues {
    [key: string]: INodeIssues;
}
export interface INodeTypeDescription {
    displayName: string;
    name: string;
    icon?: string;
    group: string[];
    version: number;
    description: string;
    defaults: INodeParameters;
    documentationUrl?: string;
    inputs: string[];
    inputNames?: string[];
    outputs: string[];
    outputNames?: string[];
    properties: INodeProperties[];
    credentials?: INodeCredentialDescription[];
    maxNodes?: number;
    polling?: boolean;
    subtitle?: string;
    hooks?: {
        [key: string]: INodeHookDescription[] | undefined;
        activate?: INodeHookDescription[];
        deactivate?: INodeHookDescription[];
    };
    webhooks?: IWebhookDescription[];
    codex?: CodexData;
}
export interface INodeHookDescription {
    method: string;
}
export interface IWebhookData {
    httpMethod: WebhookHttpMethod;
    node: string;
    path: string;
    webhookDescription: IWebhookDescription;
    workflowId: string;
    workflowExecuteAdditionalData: IWorkflowExecuteAdditionalData;
    webhookId?: string;
}
export interface IWebhookDescription {
    [key: string]: WebhookHttpMethod | WebhookResponseMode | boolean | string | undefined;
    httpMethod: WebhookHttpMethod | string;
    isFullPath?: boolean;
    name: string;
    path: string;
    responseBinaryPropertyName?: string;
    responseContentType?: string;
    responsePropertyName?: string;
    responseMode?: WebhookResponseMode | string;
    responseData?: WebhookResponseData | string;
    restartWebhook?: boolean;
}
export interface IWorkflowDataProxyData {
    $binary: any;
    $data: any;
    $env: any;
    $evaluateExpression: any;
    $item: any;
    $items: any;
    $json: any;
    $node: any;
    $parameter: any;
    $position: any;
    $workflow: any;
}
export interface IWorkflowDataProxyAdditionalKeys {
    [key: string]: string | number | undefined;
}
export interface IWorkflowMetadata {
    id?: number | string;
    name?: string;
    active: boolean;
}
export declare type WebhookHttpMethod = 'GET' | 'POST' | 'HEAD' | 'OPTIONS';
export interface IWebhookResponseData {
    workflowData?: INodeExecutionData[][];
    webhookResponse?: any;
    noWebhookResponse?: boolean;
}
export declare type WebhookResponseData = 'allEntries' | 'firstEntryJson' | 'firstEntryBinary';
export declare type WebhookResponseMode = 'onReceived' | 'lastNode';
export interface INodeTypes {
    nodeTypes: INodeTypeData;
    init(nodeTypes?: INodeTypeData): Promise<void>;
    getAll(): INodeType[];
    getByName(nodeType: string): INodeType | undefined;
}
export interface INodeTypeData {
    [key: string]: {
        type: INodeType;
        sourcePath: string;
    };
}
export interface IRun {
    data: IRunExecutionData;
    finished?: boolean;
    mode: WorkflowExecuteMode;
    waitTill?: Date;
    startedAt: Date;
    stoppedAt?: Date;
}
export interface IRunExecutionData {
    startData?: {
        destinationNode?: string;
        runNodeFilter?: string[];
    };
    resultData: {
        error?: ExecutionError;
        runData: IRunData;
        lastNodeExecuted?: string;
    };
    executionData?: {
        contextData: IExecuteContextData;
        nodeExecutionStack: IExecuteData[];
        waitingExecution: IWaitingForExecution;
    };
    waitTill?: Date;
}
export interface IRunData {
    [key: string]: ITaskData[];
}
export interface ITaskData {
    startTime: number;
    executionTime: number;
    data?: ITaskDataConnections;
    error?: ExecutionError;
}
export interface ITaskDataConnections {
    [key: string]: Array<INodeExecutionData[] | null>;
}
export interface IWaitingForExecution {
    [key: string]: {
        [key: number]: ITaskDataConnections;
    };
}
export interface IWorkflowBase {
    id?: number | string | any;
    name: string;
    active: boolean;
    createdAt: Date;
    updatedAt: Date;
    nodes: INode[];
    connections: IConnections;
    settings?: IWorkflowSettings;
    staticData?: IDataObject;
}
export interface IWorkflowCredentials {
    [key: string]: {
        [key: string]: ICredentialsEncrypted;
    };
}
export interface IWorkflowExecuteHooks {
    [key: string]: Array<(...args: any[]) => Promise<void>> | undefined;
    nodeExecuteAfter?: Array<(nodeName: string, data: ITaskData, executionData: IRunExecutionData) => Promise<void>>;
    nodeExecuteBefore?: Array<(nodeName: string) => Promise<void>>;
    workflowExecuteAfter?: Array<(data: IRun, newStaticData: IDataObject) => Promise<void>>;
    workflowExecuteBefore?: Array<(workflow: Workflow, data: IRunExecutionData) => Promise<void>>;
}
export interface IWorkflowExecuteAdditionalData {
    credentialsHelper: ICredentialsHelper;
    encryptionKey: string;
    executeWorkflow: (workflowInfo: IExecuteWorkflowInfo, additionalData: IWorkflowExecuteAdditionalData, inputData?: INodeExecutionData[], parentExecutionId?: string, loadedWorkflowData?: IWorkflowBase, loadedRunData?: any) => Promise<any>;
    executionId?: string;
    hooks?: WorkflowHooks;
    httpResponse?: express.Response;
    httpRequest?: express.Request;
    restApiUrl: string;
    sendMessageToUI?: (source: string, message: any) => void;
    timezone: string;
    webhookBaseUrl: string;
    webhookWaitingBaseUrl: string;
    webhookTestBaseUrl: string;
    currentNodeParameters?: INodeParameters;
    executionTimeoutTimestamp?: number;
}
export declare type WorkflowExecuteMode = 'cli' | 'error' | 'integrated' | 'internal' | 'manual' | 'retry' | 'trigger' | 'webhook';
export declare type WorkflowActivateMode = 'init' | 'create' | 'update' | 'activate' | 'manual';
export interface IWorkflowHooksOptionalParameters {
    parentProcessMode?: string;
    retryOf?: string;
    sessionId?: string;
}
export interface IWorkflowSettings {
    [key: string]: IDataObject | string | number | boolean | undefined;
}
export declare type LogTypes = 'debug' | 'verbose' | 'info' | 'warn' | 'error';
export interface ILogger {
    log: (type: LogTypes, message: string, meta?: object) => void;
    debug: (message: string, meta?: object) => void;
    verbose: (message: string, meta?: object) => void;
    info: (message: string, meta?: object) => void;
    warn: (message: string, meta?: object) => void;
    error: (message: string, meta?: object) => void;
}
export interface IStatusCodeMessages {
    [key: string]: string;
}
export declare type CodexData = {
    categories?: string[];
    subcategories?: {
        [category: string]: string[];
    };
    alias?: string[];
};
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonValue[];
export declare type JsonObject = {
    [key: string]: JsonValue;
};
